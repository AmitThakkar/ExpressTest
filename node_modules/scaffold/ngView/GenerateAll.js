"use strict";

exports.generateNgView = function (schemas) {
    var fs = require("fs");
    var path = require("path");
    var _ = require("underscore");
    var CONSTANTS = require("../enum/CONSTANTS");
    var ngViewsDirectory = process.cwd() + "/views/";
    var generateNgViews = function (ngViewDirectory, domainName) {
        var domainNameInSmallLetter = domainName.toLowerCase();
        var views = ["Create", "Edit", "List", "Show"];
        var domainFields = "";
        var domainFieldsValues = "";
        var domainFieldCreateEditForm = "";
        var domainFieldCreateEditTr = "";
        var domainFieldShowTr = "";
        var domainFieldValue = "";
        var updateIndexHtml = function () {
            var indexHtmlFile = ngViewsDirectory + "index.html";
            fs.readFile(indexHtmlFile, function (error, data) {
                if (error) {
                    console.log("Error occur at the time of reading index.html, Error: ", error);
                } else {
                    var indexHtmlData = data.toString();
                    var userListLinkRegex = new RegExp('<li><a ng-href="#/' + domainNameInSmallLetter + '/list/10/0">'
                        + domainName + 'Controller</a></li>')
                    var userListLink = '<li><a ng-href="#/">Dashboard</a></li>\n' + CONSTANTS.TAB + CONSTANTS.TAB
                        + CONSTANTS.TAB + '<li><a ng-href="#/' + domainNameInSmallLetter +
                        '/list/10/0">' + domainName + 'Controller</a></li>';
                    var userControllerJsLink = '<script type="text/javascript" src="js/controllers.js"></script>\n' +
                        '<script type="text/javascript" src="js/' + domainNameInSmallLetter + '/controller.js"></script>';
                    var userRouteJsLink = '<script type="text/javascript" src="js/route.mapping.js"></script>\n' +
                        '<script type="text/javascript" src="js/' + domainNameInSmallLetter + '/route.js"></script>';
                    if (!userListLinkRegex.test(indexHtmlData)) {
                        indexHtmlData = indexHtmlData.replace(/<li><a ng-href="#\/">Dashboard<\/a><\/li>/, userListLink);
                        indexHtmlData = indexHtmlData.replace(/<script type="text\/javascript" src="js\/controllers.js"><\/script>/, userControllerJsLink);
                        indexHtmlData = indexHtmlData.replace(/<script type="text\/javascript" src="js\/route.mapping.js"><\/script>/, userRouteJsLink);
                        fs.writeFile(indexHtmlFile, indexHtmlData, function (error) {
                            if (error) {
                                console.log("Error Occur at the time of updating the index.html for ", domainName);
                            } else {
                                console.log("index.html updated for ", domainName);
                            }
                        });
                    }
                }
            });
        };
        fs.readFile(__dirname + "/" + "_createEditTr.txt", function (error, data) {
            if (error) {
                console.log("_createEditTr not found, Error=", error);
            } else {
                domainFieldCreateEditTr = data.toString();
            }
            fs.readFile(__dirname + "/" + "_showTr.txt", function (error, data) {
                if (error) {
                    console.log("_showTr not found, Error=", error);
                } else {
                    domainFieldShowTr = data.toString();
                }
                _.each(require(process.cwd() + "/schema/" + domainName), function (type, field) {
                    var fieldNameInCamelCase = field.replace(/(.)/, function (string, group1) {
                        return group1.toUpperCase();
                    });
                    domainFields += "<td>" + fieldNameInCamelCase + "</td>\n" + CONSTANTS.TAB + CONSTANTS.TAB;
                    domainFieldsValues += "<td>" + "{{" + domainNameInSmallLetter + "." + field + "}}" + "</td>\n" +
                        CONSTANTS.TAB + CONSTANTS.TAB;
                    domainFieldCreateEditForm += domainFieldCreateEditTr.replace(/{{fieldNameInCamelCase}}/g, fieldNameInCamelCase).
                        replace(/{{fieldName}}/g, field) + "\n";
                    domainFieldValue += domainFieldShowTr.replace(/{{fieldName}}/, field).
                        replace(/{{fieldNameInCamelCase}}/, fieldNameInCamelCase) + "\n";
                });
                views.forEach(function (view) {
                    fs.readFile(__dirname + "/" + view + "Content.txt", function (error, data) {
                        if (error) {
                            console.log("Error occur at the time of reading the " + view + "Content.txt, Error=", error);
                        } else {
                            var htmlContent = data.toString();
                            switch (view) {
                                case "Create" :
                                case "Edit" :
                                    htmlContent = htmlContent.replace(/{{domainFieldCreateEditForm}}/, domainFieldCreateEditForm);
                                    break;
                                case "List" :
                                    htmlContent = htmlContent.replace(/{{domainFields}}/, domainFields)
                                        .replace(/{{domainFieldsValues}}/g, domainFieldsValues);
                                    break;
                                case "Show" :
                                    htmlContent = htmlContent.replace(/{{domainFieldValue}}/, domainFieldValue);
                                    break;
                            }
                            htmlContent = htmlContent.replace(/{{domainNameInSmallLetter}}/g, domainNameInSmallLetter)
                                .replace(/{{domainName}}/g, domainName);
                            fs.writeFile(ngViewDirectory + view.toLowerCase() + ".html", htmlContent, function (error) {
                                if (error) {
                                    console.log("Some Error Occur at the time of generating the ngViews, Error=", error);
                                } else {
                                    console.log("ngViews (" + view + ") Generated");
                                }
                            });
                        }
                    });
                });
            });
        });
        updateIndexHtml();
    };
    var generateNgViewsAndDirectory = function () {
        schemas.forEach(function (schemaName) {
            var domainName = schemaName.replace(/^(.)(.*)(.json)$/, function (schemaName, g1, g2) {
                return g1.toUpperCase() + g2;
            });
            var ngViewDirectory = ngViewsDirectory + domainName.toLowerCase() + "/";
            fs.exists(ngViewDirectory, function (exists) {
                if (exists) {
                    generateNgViews(ngViewDirectory, domainName);
                } else {
                    fs.mkdir(ngViewDirectory, function (error) {
                        if (error) {
                            console.log("Error Occur at the time of creating the directive(" + ngViewDirectory + "). Error= ", error);
                        } else {
                            generateNgViews(ngViewDirectory, domainName);
                        }
                    });
                }
            });
        });
    };
    fs.exists(ngViewsDirectory, function (exists) {
        if (exists) {
            generateNgViewsAndDirectory()
        } else {
            fs.mkdir(ngViewsDirectory, function (error) {
                if (error) {
                    console.log("Error Occur at the time of creating the directive(" + ngViewsDirectory + "). Error= ", error);
                } else {
                    generateNgViewsAndDirectory();
                }
            });
        }
    });
};