"use strict";

exports.generateAll = function () {
    var fs = require("fs");
    var path = require("path");
    var _ = require("underscore");
    var CONSTANTS = require("../enum/CONSTANTS");
    fs.readdir(process.cwd() + "/schema/", function (error, schemas) {
        if (error) {
            console.log("Some error occur while reading the schemas, Error: ", error);
        } else if (schemas && schemas.length > 0) {
            var ngViewsDirectory = process.cwd() + "/views/";
            var generateNgViews = function (ngViewDirectory, domainName) {
                var domainNameInSmallLetter = domainName.toLowerCase();
                var views = ["Create", "Edit", "List", "Show"];
                var domainFields = "";
                var domainFieldsValues = "";
                var domainFieldCreateForm = "";
                var domainFieldCreateTr = "";
                fs.readFile(__dirname + "/" + "_createTr.txt", function (error, data) {
                    if (error) {
                        console.log("_createTr not found, Error=", error);
                    } else {
                        domainFieldCreateTr = data.toString();
                    }
                    _.each(require(process.cwd() + "/schema/" + domainName), function (type, field) {
                        var fieldNameInCamelCase = field.replace(/(.)/, function (string, group1) {
                            return group1.toUpperCase();
                        });
                        domainFields += "<td>" + fieldNameInCamelCase + "</td>\n" + CONSTANTS.TAB + CONSTANTS.TAB;
                        domainFieldsValues += "<td>" + "{{" + domainNameInSmallLetter + "." + field + "}}" + "</td>\n" +
                            CONSTANTS.TAB + CONSTANTS.TAB;
                        domainFieldCreateForm += domainFieldCreateTr.replace(/{{fieldNameInCamelCase}}/g, fieldNameInCamelCase).
                            replace(/{{fieldName}}/g, field) + "\n";
                    });
                    views.forEach(function (view) {
                        fs.readFile(__dirname + "/" + view + "Content.txt", function (error, data) {
                            if (error) {
                                console.log("Error occur at the time of reading the " + view + "Content.txt, Error=", error);
                            } else {
                                var htmlContent = data.toString();
                                switch (view) {
                                    case "Create" :
                                        htmlContent = htmlContent.replace(/{{domainFieldCreateForm}}/, domainFieldCreateForm);
                                        break;
                                    case "Edit" :
                                        break;
                                    case "List" :
                                        htmlContent = htmlContent.replace(/{{domainFields}}/, domainFields)
                                            .replace(/{{domainFieldsValues}}/g, domainFieldsValues);
                                        break;
                                    case "Show" :
                                        break;
                                }
                                htmlContent = htmlContent.replace(/{{domainNameInSmallLetter}}/g, domainNameInSmallLetter)
                                    .replace(/{{domainName}}/g, domainName);
                                fs.writeFile(ngViewDirectory + view.toLowerCase() + ".html", htmlContent, function (error, data) {
                                    if (error) {
                                        console.log("Some Error Occur at the time of generating the ngViews, Error=", error);
                                    } else {
                                        console.log("ngViews (" + view + ") Generated");
                                    }
                                });
                            }
                        });
                    });
                });
            };
            var generateNgViewsAndDirectory = function () {
                schemas.forEach(function (schemaName) {
                    var domainName = schemaName.replace(/^(.)(.*)(.json)$/, function (schemaName, g1, g2) {
                        return g1.toUpperCase() + g2;
                    });
                    var ngViewDirectory = ngViewsDirectory + domainName.toLowerCase() + "/";
                    fs.exists(ngViewDirectory, function (exists) {
                        if (exists) {
                            generateNgViews(ngViewDirectory, domainName);
                        } else {
                            fs.mkdir(ngViewDirectory, function (error, dir) {
                                if (error) {
                                    console.log("Error Occur at the time of creating the directive(" + ngViewDirectory + "). Error= ", error);
                                } else {
                                    generateNgViews(ngViewDirectory, domainName);
                                }
                            });
                        }
                    });
                });
            };
            fs.exists(ngViewsDirectory, function (exists) {
                if (exists) {
                    generateNgViewsAndDirectory()
                } else {
                    fs.mkdir(ngViewsDirectory, function (error, dir) {
                        if (error) {
                            console.log("Error Occur at the time of creating the directive(" + ngViewsDirectory + "). Error= ", error);
                        } else {
                            generateNgViewsAndDirectory();
                        }
                    });
                }
            });
        } else {
            console.log("No Schema found");
        }
    });
};