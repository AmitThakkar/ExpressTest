"use strict";

exports.generateNgController = function (schemas) {
    var fs = require("fs");
    var _ = require("underscore");
    var CONSTANTS = require("../enum/CONSTANTS");
    var ngControllersDirectory = process.cwd() + "/public/js/";
    var generateNgControllers = function (ngControllerDirectory, domainName) {
        var domainNameInSmallLetter = domainName.toLowerCase();
        var newDocument = "{";
        var updatedDocument = "{\n" + CONSTANTS.TAB + CONSTANTS.TAB + CONSTANTS.TAB + CONSTANTS.TAB + CONSTANTS.TAB + "_id: $scope." + domainNameInSmallLetter + "._id,";
        var schema = require(process.cwd() + "/schema/" + domainName);
        _.each(schema, function (value, key) {
            newDocument += ("\n" + CONSTANTS.TAB + CONSTANTS.TAB + CONSTANTS.TAB + CONSTANTS.TAB + CONSTANTS.TAB + key + ": $scope." + domainNameInSmallLetter + "." + key + ",");
            updatedDocument += ("\n" + CONSTANTS.TAB + CONSTANTS.TAB + CONSTANTS.TAB + CONSTANTS.TAB + CONSTANTS.TAB + key + ": $scope." + domainNameInSmallLetter + "." + key + ",");
        });
        newDocument += "}";
        updatedDocument += "}";
        newDocument = newDocument.replace(/,}/, "\n" + CONSTANTS.TAB + CONSTANTS.TAB + CONSTANTS.TAB + CONSTANTS.TAB + "}");
        updatedDocument = updatedDocument.replace(/,}/, "\n" + CONSTANTS.TAB + CONSTANTS.TAB + CONSTANTS.TAB + CONSTANTS.TAB + "}");
        fs.readFile(__dirname + "/" + "Content.txt", function (error, data) {
            var ngController = data.toString().replace(/{{domainName}}/g, domainName).
                replace(/{{domainNameInSmallLetter}}/g, domainNameInSmallLetter).
                replace(/{{newDocument}}/, newDocument).replace(/{{updatedDocument}}/, updatedDocument);
            fs.writeFile(ngControllerDirectory + "controller.js", ngController, function (error) {
                if (error) {
                    console.log("Some Error Occur at the time of generating the ngControllers, Error=", error);
                } else {
                    console.log("ngControllers Generated");
                }
            });
        });
    };
    var generateNgControllersAndDirectory = function () {
        schemas.forEach(function (schemaName) {
            var domainName = schemaName.replace(/^(.)(.*)(.json)$/, function (schemaName, g1, g2) {
                return g1.toUpperCase() + g2;
            });
            var ngControllerDirectory = ngControllersDirectory + domainName.toLowerCase() + "/";
            fs.exists(ngControllerDirectory, function (exists) {
                if (exists) {
                    generateNgControllers(ngControllerDirectory, domainName);
                } else {
                    fs.mkdir(ngControllerDirectory, function (error) {
                        if (error) {
                            console.log("Error Occur at the time of creating the directive(" + ngControllerDirectory + "). Error= ", error);
                        } else {
                            generateNgControllers(ngControllerDirectory, domainName);
                        }
                    });
                }
            });
        });
    };
    fs.exists(ngControllersDirectory, function (exists) {
        if (exists) {
            generateNgControllersAndDirectory()
        } else {
            fs.mkdir(ngControllersDirectory, function (error) {
                if (error) {
                    console.log("Error Occur at the time of creating the directive(" + ngControllersDirectory + "). Error= ", error);
                } else {
                    generateNgControllersAndDirectory();
                }
            });
        }
    });
};