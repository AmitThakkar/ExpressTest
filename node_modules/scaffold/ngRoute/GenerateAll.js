"use strict";

exports.generateNgRoute = function () {
    var fs = require("fs");
    var CONSTANTS = require("../enum/CONSTANTS");
    fs.readdir(process.cwd() + "/schema/", function (error, schemas) {
        if (error) {
            console.log("Some error occur while reading the schemas, Error: ", error);
        } else if (schemas && schemas.length > 0) {
            var ngRoutesDirectory = process.cwd() + "/public/js/";
            var generateNgRoutes = function (ngRouteDirectory, domainName) {
                var domainNameInSmallLetter = domainName.toLowerCase();
                fs.readFile(__dirname + "/" + "Content.txt", function (error, data) {
                    var ngRoute = data.toString().replace(/{{domainName}}/g, domainName).
                        replace(/{{domainNameInSmallLetter}}/g, domainNameInSmallLetter);
                    fs.writeFile(ngRouteDirectory + "route.js", ngRoute, function (error) {
                        if (error) {
                            console.log("Some Error Occur at the time of generating the routes, Error=", error);
                        } else {
                            console.log("routes Generated");
                        }
                    });
                });
            };
            var generateNgRoutesAndDirectory = function () {
                var updateRouting = function (domainName) {
                    var routes = fs.readFile(ngRoutesDirectory + "routes.js", function (error, data) {
                        if (error) {
                            console.log("Error Occur at the time of reading file(" + ngRoutesDirectory + "routes.js). Error: ", error);
                        } else {
                            var routesContent = data.toString();
                            if (!(new RegExp("get" + domainName + "Route").test(routesContent))) {
                                var route = "var routes = [];\n" + CONSTANTS.TAB + "routes = routes.concat(get" + domainName + "Route());";
                                routesContent = routesContent.replace(/var routes = \[\];/, route);
                                fs.writeFile(ngRoutesDirectory + "routes.js", routesContent, function (error) {
                                    if (error) {
                                        console.log("Error Occur at the time of updating routes.js, Error:", error);
                                    } else {
                                        console.log("routes.js Updated successfully for " + domainName);
                                    }
                                });
                            }
                            var domainNameInSmallLetter = domainName.toLowerCase();
                            if (!(new RegExp("meanStack." + domainNameInSmallLetter + ".controllers").test(routesContent))) {
                                var moduleController = '"meanStack.constants",\n' + CONSTANTS.TAB + '"meanStack.' + domainNameInSmallLetter + '.controllers",';
                                routesContent = routesContent.replace(/"meanStack.constants",/, moduleController);
                                fs.writeFile(ngRoutesDirectory + "routes.js", routesContent, function (error) {
                                    if (error) {
                                        console.log("Error Occur at the time of updating routes.js, Error:", error);
                                    } else {
                                        console.log("routes.js Updated successfully for " + domainNameInSmallLetter);
                                    }
                                });
                            }
                        }
                    });
                };
                schemas.forEach(function (schemaName) {
                    var domainName = schemaName.replace(/^(.)(.*)(.json)$/, function (schemaName, g1, g2) {
                        return g1.toUpperCase() + g2;
                    });
                    var ngRouteDirectory = ngRoutesDirectory + domainName.toLowerCase() + "/";
                    fs.exists(ngRouteDirectory, function (exists) {
                        if (exists) {
                            generateNgRoutes(ngRouteDirectory, domainName);
                        } else {
                            fs.mkdir(ngRouteDirectory, function (error) {
                                if (error) {
                                    console.log("Error Occur at the time of creating the directive(" + ngRouteDirectory + "). Error= ", error);
                                } else {
                                    generateNgRoutes(ngRouteDirectory, domainName);
                                }
                            });
                        }
                    });
                    updateRouting(domainName);
                });
            };
            fs.exists(ngRoutesDirectory, function (exists) {
                if (exists) {
                    generateNgRoutesAndDirectory()
                } else {
                    fs.mkdir(ngRoutesDirectory, function (error) {
                        if (error) {
                            console.log("Error Occur at the time of creating the directive(" + ngRoutesDirectory + "). Error= ", error);
                        } else {
                            generateNgRoutesAndDirectory();
                        }
                    });
                }
            });
        } else {
            console.log("No Schema found");
        }
    });
};