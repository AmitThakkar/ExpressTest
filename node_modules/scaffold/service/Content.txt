"use strict";

var EventEmitter = require("events").EventEmitter;
var ResponseStatus = require("../src/enum/ResponseStatus");

exports.dependencies = {
    {{domainName}}: ""
};

exports.get = function (id) {
    var emitter = new EventEmitter();
    exports.dependencies.{{domainName}}.findById(id, function (error, {{domainNameInSmallLetter}}s) {
        if (error) {
            console.log("Error Occur in {{domainName}}Service.get", error);
            emitter.emit(ResponseStatus.ERROR);
        } else if ({{domainNameInSmallLetter}}s && {{domainNameInSmallLetter}}s.length > 0) {
            emitter.emit(ResponseStatus.SUCCESS, {{domainNameInSmallLetter}}s[0]);
        } else {
            console.log("No {{domainNameInSmallLetter}}s found with Id -> ", id);
            emitter.emit(ResponseStatus.NOT_FOUND);
        }
    });
    return emitter;
};

exports.delete = function (id) {
    var emitter = new EventEmitter();
    exports.dependencies.{{domainName}}.removeById(id, function (error, removeCount) {
        if (error) {
            console.log("Error Occur in {{domainName}}Service.delete", error);
            emitter.emit(ResponseStatus.ERROR);
        } else if (removeCount) {
            emitter.emit(ResponseStatus.SUCCESS);
        } else {
            console.log("No {{domainNameInSmallLetter}} found with Id -> ", id);
            emitter.emit(ResponseStatus.NOT_FOUND);
        }
    });
    return emitter;
};

exports.save = function ({{domainNameInSmallLetter}}CO) {
    var emitter = new EventEmitter();
    new exports.dependencies.{{domainName}}({{newDocument}}).save(function (error, {{domainNameInSmallLetter}}) {
            if (error) {
                console.log("Error Occur in {{domainName}}Service.save", error);
                emitter.emit(ResponseStatus.ERROR);
            } else if ({{domainNameInSmallLetter}}) {
                emitter.emit(ResponseStatus.SUCCESS, {{domainNameInSmallLetter}}.toObject());
            } else {
                console.log("{{domainName}} Not saved with details", JSON.stringify({{domainNameInSmallLetter}}CO));
                emitter.emit(ResponseStatus.NOT_SAVED);
            }
        });
    return emitter;
};

exports.update = function ({{domainNameInSmallLetter}}CO) {
    var emitter = new EventEmitter();
    exports.dependencies.{{domainName}}.update{{domainName}}({{domainNameInSmallLetter}}CO, function (error, updateCount) {
        if (error) {
            console.log("Error Occur in {{domainName}}Service.update", error);
            emitter.emit(ResponseStatus.ERROR);
        } else if (updateCount) {
            emitter.emit(ResponseStatus.SUCCESS);
        } else {
            console.log("No {{domainNameInSmallLetter}} found with Id -> ", {{domainNameInSmallLetter}}CO._id);
            emitter.emit(ResponseStatus.NOT_FOUND);
        }
    });
    return emitter;
};

exports.list = function (max, offset) {
    var emitter = new EventEmitter();
    exports.dependencies.{{domainName}}.findAll(max, offset, function (error, {{domainNameInSmallLetter}}s) {
        if (error) {
            console.log("Error Occur in {{domainName}}Service.list", error);
            emitter.emit(ResponseStatus.ERROR);
        } else if ({{domainNameInSmallLetter}}s && {{domainNameInSmallLetter}}s.length > 0) {
            exports.dependencies.{{domainName}}.count(function (error, count) {
                if (error) {
                    console.log("Error Occur in {{domainName}}Service.list", error);
                    emitter.emit(ResponseStatus.ERROR);
                } else if (count) {
                    emitter.emit(ResponseStatus.SUCCESS, {total: count, {{domainNameInSmallLetter}}s: {{domainNameInSmallLetter}}s});
                } else {
                    console.log("{{domainName}} not found with Max and offset -> " + max + " And " + offset);
                    emitter.emit(ResponseStatus.NOT_FOUND);
                }
            });
        } else {
            console.log("{{domainName}} not found with Max and offset -> " + max + " And " + offset);
            emitter.emit(ResponseStatus.NOT_FOUND);
        }
    });
    return emitter;
};