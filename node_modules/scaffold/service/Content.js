"use strict";

exports.getText = function () {
    return '\
"use strict";\n\n\
var EventEmitter = require("events").EventEmitter;\n\
var ResponseStatus = require("../src/enum/ResponseStatus");\n\n\
exports.dependencies = {\n\
    {{domainName}}: ""\n\
};\n\n\
exports.get = function (id) {\n\
    var emitter = new EventEmitter();\n\
    exports.dependencies.{{domainName}}.findById(id, function (error, {{domainNameInSmallLetter}}s) {\n\
        if (error) {\n\
            console.log("Error Occur in {{domainName}}Service.get", error);\n\
            emitter.emit(ResponseStatus.ERROR);\n\
        } else if ({{domainNameInSmallLetter}}s && {{domainNameInSmallLetter}}s.length > 0) {\n\
            emitter.emit(ResponseStatus.SUCCESS, {{domainNameInSmallLetter}}s[0]);\n\
        } else {\n\
            console.log("No {{domainNameInSmallLetter}}s found with Id -> ", id);\n\
            emitter.emit(ResponseStatus.NOT_FOUND);\n\
        }\n\
    });\n\
    return emitter;\n\
};\n\n\
exports.delete = function (id) {\n\
    var emitter = new EventEmitter();\n\
    exports.dependencies.{{domainName}}.removeById(id, function (error, removeCount) {\n\
        if (error) {\n\
            console.log("Error Occur in {{domainName}}Service.delete", error);\n\
            emitter.emit(ResponseStatus.ERROR);\n\
        } else if (removeCount) {\n\
            emitter.emit(ResponseStatus.SUCCESS);\n\
        } else {\n\
            console.log("No {{domainNameInSmallLetter}} found with Id -> ", id);\n\
            emitter.emit(ResponseStatus.NOT_FOUND);\n\
        }\n\
    });\n\
    return emitter;\n\
};\n\n\
exports.save = function ({{domainNameInSmallLetter}}CO) {\n\
    var emitter = new EventEmitter();\n\
    new exports.dependencies.{{domainName}}({{newDocument}}).save(function (error, {{domainNameInSmallLetter}}) {\n\
            if (error) {\n\
                console.log("Error Occur in {{domainName}}Service.save", error);\n\
                emitter.emit(ResponseStatus.ERROR);\n\
            } else if ({{domainNameInSmallLetter}}) {\n\
                emitter.emit(ResponseStatus.SUCCESS, {{domainNameInSmallLetter}}.toObject());\n\
            } else {\n\
                console.log("{{domainName}} Not saved with details", JSON.stringify({{domainNameInSmallLetter}}CO));\n\
                emitter.emit(ResponseStatus.NOT_SAVED);\n\
            }\n\
        });\n\
    return emitter;\n\
};\n\n\
exports.update = function ({{domainNameInSmallLetter}}CO) {\n\
    var emitter = new EventEmitter();\n\
    exports.dependencies.{{domainName}}.update{{domainName}}({{domainNameInSmallLetter}}CO, function (error, updateCount) {\n\
        if (error) {\n\
            console.log("Error Occur in {{domainName}}Service.update", error);\n\
            emitter.emit(ResponseStatus.ERROR);\n\
        } else if (updateCount) {\n\
            emitter.emit(ResponseStatus.SUCCESS);\n\
        } else {\n\
            console.log("No {{domainNameInSmallLetter}} found with Id -> ", {{domainNameInSmallLetter}}CO._id);\n\
            emitter.emit(ResponseStatus.NOT_FOUND);\n\
        }\n\
    });\n\
    return emitter;\n\
};\n\n\
exports.list = function (max, offset) {\n\
    var emitter = new EventEmitter();\n\
    exports.dependencies.{{domainName}}.findAll(max, offset, function (error, {{domainNameInSmallLetter}}s) {\n\
        if (error) {\n\
            console.log("Error Occur in {{domainName}}Service.list", error);\n\
            emitter.emit(ResponseStatus.ERROR);\n\
        } else if ({{domainNameInSmallLetter}}s && {{domainNameInSmallLetter}}s.length > 0) {\n\
            exports.dependencies.{{domainName}}.count(function (error, count) {\n\
                if (error) {\n\
                    console.log("Error Occur in {{domainName}}Service.list", error);\n\
                    emitter.emit(ResponseStatus.ERROR);\n\
                } else if (count) {\n\
                    emitter.emit(ResponseStatus.SUCCESS, {total: count, {{domainNameInSmallLetter}}s: {{domainNameInSmallLetter}}s});\n\
                } else {\n\
                    console.log("{{domainName}} not found with Max and offset -> " + max + " And " + offset);\n\
                    emitter.emit(ResponseStatus.NOT_FOUND);\n\
                }\n\
            });\n\
        } else {\n\
            console.log("{{domainName}} not found with Max and offset -> " + max + " And " + offset);\n\
            emitter.emit(ResponseStatus.NOT_FOUND);\n\
        }\n\
    });\n\
    return emitter;\n\
};'
};